{"ast":null,"code":"var _jsxFileName = \"/home/antonio/IceBox/src/dashboard/ProblemCard.js\";\nimport React, { Component } from 'react';\nimport { Card, CardContent, Typography, CardActions, Box, Chip, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500]\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500]\n  }\n}));\n\nfunction ConvertDate(date) {\n  var full_date = new Date(date.seconds * 1000);\n  return full_date.toLocaleDateString(\"en-US\");\n}\n\nfunction createChip(category) {\n  var color_list = {\n    A: \"#ad1457\",\n    C: \"#fdd835\",\n    G: \"#00695c\",\n    N: \"#0277bd\",\n    M: \"#512da8\"\n  };\n  var primary = \"primary\";\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Chip, {\n    className: classes.orange,\n    avatar: /*#__PURE__*/React.createElement(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, category),\n    color: \"A\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  });\n}\n\nfunction generateChips(chip_array) {\n  if (typeof chip_array !== 'undefined') {\n    var chips = [];\n\n    for (var i = 0; i < chip_array.length; ++i) {\n      chips.push(createChip(chip_array[i]));\n    }\n\n    return chips;\n  } else {\n    return \" \";\n  }\n}\n\nconst ProblemCard = props => {\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      minWidth: 1000,\n      maxWidth: 1000\n    },\n    key: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }\n  }, props.statement), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"10pt\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"base_table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"left_col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 6\n    }\n  }, props.proposer, \" on \", ConvertDate(props.date_created)), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"center_col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 6\n    }\n  }, generateChips(props.category)), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"right_col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }\n  }, \"Difficulty: \", props.difficulty)))))));\n};\n\nexport default ProblemCard;","map":{"version":3,"sources":["/home/antonio/IceBox/src/dashboard/ProblemCard.js"],"names":["React","Component","Card","CardContent","Typography","CardActions","Box","Chip","Avatar","makeStyles","deepOrange","deepPurple","useStyles","theme","root","display","margin","spacing","orange","color","palette","getContrastText","backgroundColor","purple","ConvertDate","date","full_date","Date","seconds","toLocaleDateString","createChip","category","color_list","A","C","G","N","M","primary","classes","generateChips","chip_array","chips","i","length","push","ProblemCard","props","minWidth","maxWidth","id","statement","proposer","date_created","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Card, CardContent, Typography, CardActions, Box, Chip, Avatar} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n}));\n\n\nfunction ConvertDate (date) {\n\tvar full_date = new Date(date.seconds*1000)\n\treturn full_date.toLocaleDateString(\"en-US\")\n}\n\nfunction createChip (category) {\n\tvar color_list = {A: \"#ad1457\", C: \"#fdd835\", G: \"#00695c\", N: \"#0277bd\", M: \"#512da8\"}\n\tvar primary = \"primary\"\n\tconst classes = useStyles();\n\treturn (\n\t\t<Chip\n\t\t\tclassName={classes.orange}\n\t\t\tavatar={<Avatar>{category}</Avatar>}\n\t\t\tcolor=\"A\"\n\t\t/>\n\t\t)\n}\n\nfunction generateChips (chip_array) {\n\tif (typeof chip_array !== 'undefined') {\n\t\tvar chips = []\n\t\tfor (var i = 0; i < chip_array.length; ++i){\n\t\t\tchips.push(createChip(chip_array[i]))\n\t\t}\n\t\treturn(chips)}\n\telse {\n\t\treturn (\" \")\n\t}\n}\n\nconst ProblemCard = (props) =>  {\n\treturn (\n\t\t<Card style={{minWidth: 1000, maxWidth: 1000}} key={props.id}>\n\t\t\t<CardContent>\n\t\t\t\t{props.statement}\n\t\t\t</CardContent>\n\t\t\t<CardActions>\n\t\t\t\t<div style={{margin: \"10pt\"}}>\n\t\t\t\t\t<table className=\"base_table\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t<td className=\"left_col\">\n\t\t\t\t\t\t{props.proposer} on {ConvertDate(props.date_created)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t<td className=\"center_col\">{generateChips(props.category)}</td>\n\t\t\t\t\t<td className=\"right_col\">Difficulty: {props.difficulty}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</CardActions>\n\t\t</Card>\n\t);\n}\n\nexport default ProblemCard\n"]},"metadata":{},"sourceType":"module"}