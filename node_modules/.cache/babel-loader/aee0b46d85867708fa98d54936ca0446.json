{"ast":null,"code":"var _jsxFileName = \"/home/antonio/IceBox/src/dashboard/ProblemCard.js\";\nimport React, { Component } from 'react';\nimport { Card, CardContent, Typography, CardActions, Box, Chip, Avatar } from '@material-ui/core';\n\nfunction ConvertDate(date) {\n  var full_date = new Date(date.seconds * 1000);\n  return full_date.toLocaleDateString(\"en-US\");\n}\n\nfunction createChip(category) {\n  var color_list = {\n    A: \"#ad1457\",\n    C: \"#fdd835\",\n    G: \"#00695c\",\n    N: \"#0277bd\",\n    M: \"#512da8\"\n  };\n  var primary = \"primary\";\n  return /*#__PURE__*/React.createElement(Chip, {\n    avatar: /*#__PURE__*/React.createElement(Avatar, {\n      style: {\n        \"backgroundColor\": color_list[category],\n        \"color\": \"#fff\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, category),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  });\n}\n\nfunction generateChips(chip_array) {\n  if (typeof chip_array !== 'undefined') {\n    var chips = [];\n\n    for (var i = 0; i < chip_array.length; ++i) {\n      chips.push(createChip(chip_array[i]));\n    }\n\n    return chips;\n  } else {\n    return \" \";\n  }\n}\n\nlet promise = Promise.resolve(); // Used to hold chain of typesetting calls\n\nfunction typeset(code) {\n  promise = promise.then(() => {\n    code();\n    return MathJax.typesetPromise();\n  }).catch(err => console.log('Typeset failed: ' + err.message));\n  return promise;\n}\n\nconst ProblemCard = props => {\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      minWidth: 1000,\n      maxWidth: 1000\n    },\n    key: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"problem_statement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, props.statement))), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"10pt\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"base_table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"left_col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }\n  }, props.proposer, \" on \", ConvertDate(props.date_created)), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"center_col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }\n  }, generateChips(props.category)), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"right_col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }\n  }, \"Difficulty: \", props.difficulty)))))));\n};\n\nexport default ProblemCard;","map":{"version":3,"sources":["/home/antonio/IceBox/src/dashboard/ProblemCard.js"],"names":["React","Component","Card","CardContent","Typography","CardActions","Box","Chip","Avatar","ConvertDate","date","full_date","Date","seconds","toLocaleDateString","createChip","category","color_list","A","C","G","N","M","primary","generateChips","chip_array","chips","i","length","push","promise","Promise","resolve","typeset","code","then","MathJax","typesetPromise","catch","err","console","log","message","ProblemCard","props","minWidth","maxWidth","id","statement","margin","proposer","date_created","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Card, CardContent, Typography, CardActions, Box, Chip, Avatar} from '@material-ui/core';\n\n\nfunction ConvertDate (date) {\n\tvar full_date = new Date(date.seconds*1000)\n\treturn full_date.toLocaleDateString(\"en-US\")\n}\n\nfunction createChip (category) {\n\tvar color_list = {A: \"#ad1457\", C: \"#fdd835\", G: \"#00695c\", N: \"#0277bd\", M: \"#512da8\"}\n\tvar primary = \"primary\"\n\treturn (\n\t\t<Chip\n\t\t\tavatar={<Avatar style={{\"backgroundColor\": color_list[category], \"color\": \"#fff\"}}>{category}</Avatar>}\n\t\t/>\n\t\t)\n}\n\nfunction generateChips (chip_array) {\n\tif (typeof chip_array !== 'undefined') {\n\t\tvar chips = []\n\t\tfor (var i = 0; i < chip_array.length; ++i){\n\t\t\tchips.push(createChip(chip_array[i]))\n\t\t}\n\t\treturn(chips)}\n\telse {\n\t\treturn (\" \")\n\t}\n}\n\nlet promise = Promise.resolve();  // Used to hold chain of typesetting calls\n\nfunction typeset(code) {\n  promise = promise.then(() => {code(); return MathJax.typesetPromise()})\n                   .catch((err) => console.log('Typeset failed: ' + err.message));\n  return promise;\n}\n\nconst ProblemCard = (props) =>  {\n\treturn (\n\t\t<Card style={{minWidth: 1000, maxWidth: 1000}} key={props.id}>\n\t\t\t<CardContent>\n\t\t\t\t<div className=\"problem_statement\">\n\t\t\t\t<p>{props.statement}</p>\n\t\t\t\t</div>\n\t\t\t</CardContent>\n\t\t\t<CardActions>\n\t\t\t\t<div style={{margin: \"10pt\"}}>\n\t\t\t\t\t<table className=\"base_table\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t<td className=\"left_col\">\n\t\t\t\t\t\t{props.proposer} on {ConvertDate(props.date_created)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t<td className=\"center_col\">{generateChips(props.category)}</td>\n\t\t\t\t\t<td className=\"right_col\">Difficulty: {props.difficulty}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</CardActions>\n\t\t</Card>\n\t);\n}\n\nexport default ProblemCard\n"]},"metadata":{},"sourceType":"module"}