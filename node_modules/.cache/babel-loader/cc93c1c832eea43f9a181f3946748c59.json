{"ast":null,"code":"var _jsxFileName = \"/home/antonio/IceBox/src/dashboard/ProblemCard.js\";\nimport React, { Component, useEffect } from 'react';\nimport { Card, CardContent, Typography, CardActions, Box, Chip, Divider } from '@material-ui/core';\n\nfunction ConvertDate(date) {\n  var full_date = new Date(date.seconds * 1000);\n  return full_date.toLocaleDateString(\"en-US\");\n}\n\nfunction createChip(category) {\n  var color_list = {\n    Algebra: \"#DB4437\",\n    Combinatorics: \"#F4B400\",\n    Geometry: \"#00695c\",\n    \"Number Theory\": \"#4285F4\",\n    \"Miscellaneous\": \"#512da8\"\n  };\n  var primary = \"primary\";\n  return /*#__PURE__*/React.createElement(Chip, {\n    key: color_list[category],\n    style: {\n      \"backgroundColor\": color_list[category],\n      \"color\": \"#fff\"\n    },\n    label: category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  });\n}\n\nfunction generateChips(chip_array) {\n  if (typeof chip_array !== 'undefined') {\n    var chips = [];\n\n    for (var i = 0; i < chip_array.length; ++i) {\n      chips.push(createChip(chip_array[i]));\n    }\n\n    return chips;\n  } else {\n    return \" \";\n  }\n}\n\nconst ProblemCard = props => {\n  window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      minWidth: 1000,\n      maxWidth: 1000\n    },\n    key: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"problem_statement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, props.statement))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"10pt\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"base_table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"left_col\",\n    key: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 6\n    }\n  }, props.proposer, \" on \", ConvertDate(props.date_created)), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"center_col\",\n    key: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 6\n    }\n  }, generateChips(props.category)), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"right_col\",\n    key: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }\n  }, \"Difficulty: \", props.difficulty)))))));\n};\n\nexport default ProblemCard;","map":{"version":3,"sources":["/home/antonio/IceBox/src/dashboard/ProblemCard.js"],"names":["React","Component","useEffect","Card","CardContent","Typography","CardActions","Box","Chip","Divider","ConvertDate","date","full_date","Date","seconds","toLocaleDateString","createChip","category","color_list","Algebra","Combinatorics","Geometry","primary","generateChips","chip_array","chips","i","length","push","ProblemCard","props","window","MathJax","Hub","Queue","minWidth","maxWidth","id","statement","margin","proposer","date_created","difficulty"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\nimport {Card, CardContent, Typography, CardActions, Box, Chip,  Divider} from '@material-ui/core';\n\n\nfunction ConvertDate (date) {\n\tvar full_date = new Date(date.seconds*1000)\n\treturn full_date.toLocaleDateString(\"en-US\")\n}\n\nfunction createChip (category) {\n\tvar color_list = {Algebra: \"#DB4437\", Combinatorics: \"#F4B400\", Geometry: \"#00695c\", \"Number Theory\": \"#4285F4\", \"Miscellaneous\": \"#512da8\"}\n\tvar primary = \"primary\"\n\treturn (\n\t\t<Chip key={color_list[category]} style={{\"backgroundColor\": color_list[category], \"color\": \"#fff\"}}\n\t\tlabel={category}\n\t\t/>\n\t\t)\n}\n\nfunction generateChips (chip_array) {\n\tif (typeof chip_array !== 'undefined') {\n\t\tvar chips = []\n\t\tfor (var i = 0; i < chip_array.length; ++i){\n\t\t\tchips.push(createChip(chip_array[i]))\n\t\t}\n\t\treturn(chips)}\n\telse {\n\t\treturn (\" \")\n\t}\n}\n\n\nconst ProblemCard = (props) =>  {\n\twindow.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n\treturn (\n\t\t<Card style={{minWidth: 1000, maxWidth: 1000}} key={props.id}>\n\t\t\t<CardContent>\n\t\t\t\t<div className=\"problem_statement\">\n\t\t\t\t<p>{props.statement}</p>\n\t\t\t\t</div>\n\t\t\t</CardContent>\n\t\t\t<Divider/>\n\t\t\t<CardActions>\n\t\t\t\t<div style={{margin: \"10pt\"}}>\n\t\t\t\t\t<table className=\"base_table\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t<td className=\"left_col\" key=\"left\">\n\t\t\t\t\t\t{props.proposer} on {ConvertDate(props.date_created)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t<td className=\"center_col\" key=\"center\">{generateChips(props.category)}</td>\n\t\t\t\t\t<td className=\"right_col\" key=\"right\">Difficulty: {props.difficulty}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</CardActions>\n\t\t</Card>\n\t);\n}\n\nexport default ProblemCard\n"]},"metadata":{},"sourceType":"module"}